name: CI/CD

env:
  OWNER: aiautomationagency
  ECR_REGISTERY: 146023855582.dkr.ecr.eu-central-1.amazonaws.com/ai_automation_agency

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Fetching local repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build Docker images
        run: |
          docker build -t ${{ env.ECR_REGISTERY }}/healthy:latest .
          docker tag ${{ env.ECR_REGISTERY }}/healthy:latest ${{ env.ECR_REGISTERY }}/healthy:${{ github.ref_name }}
          
          # Push the images to ECR
          docker build -t ${{ env.ECR_REGISTERY }}/my_celery:latest --file celery/Dockerfile .
          docker tag ${{ env.ECR_REGISTERY }}/my_celery:latest ${{ env.ECR_REGISTERY }}/my_celery:${{ github.ref_name }}

      - name: Push the image to ECR Hub
        run: |
          docker push ${{ env.ECR_REGISTERY }}/healthy:latest
          docker push ${{ env.ECR_REGISTERY }}/healthy:${{ github.ref_name }}

          docker push ${{ env.ECR_REGISTERY }}/my_celery:latest
          docker push ${{ env.ECR_REGISTERY }}/my_celery:${{ github.ref_name }}


  deploy_to_testing_environment:
    env:
      SERVER: ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}
      SOURCE: .env docker-compose.yml nginx
      DESTINATION: ~/core/
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Sync files
        run: |
          sudo apt install sshpass -y

          # Copy the main services
          sshpass -p "${{ secrets.VPS_PASS }}" rsync -aP -e "ssh -p ${{ secrets.VPS_PORT }}" ${{ env.SOURCE }} ${{ env.SERVER }}:${{ env.DESTINATION }}


      - name: Deploy now
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASS }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            # Login to ECR
            docker login --username ${{ github.repository_owner }} --password ${{ github.token }}

            cd ~/core
            # Pull the new image
            docker-compose pull web celery

            # Stop and remove the old container
            docker rm -fv core_web_1 core_celery_1

            # Up everything
            docker-compose up -d

            # Run migrations
            # Nothing yet

            # Run DB seeds
            # Nothing yet

            # Some space clean up
            docker image prune -f

            # Inform me/us
            # nothing yet