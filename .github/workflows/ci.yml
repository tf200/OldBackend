name: CI/CD

env:
  OWNER: aiautomationagency
  ECR_REGISTRY: 146023855582.dkr.ecr.eu-central-1.amazonaws.com
  ECR_REGION: eu-central-1

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Fetching local repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ECR_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build Docker images
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/healthy:latest .
          docker tag ${{ env.ECR_REGISTRY }}/healthy:latest ${{ env.ECR_REGISTRY }}/healthy:${{ github.ref_name }}

      - name: Push the image to ECR Hub
        run: |
          docker push ${{ env.ECR_REGISTRY }}/healthy:latest
          docker push ${{ env.ECR_REGISTRY }}/healthy:${{ github.ref_name }}

  deploy:
    name: Deploy to Development Server
    env:
      SERVER: ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}
      SOURCE: .env docker-compose.yml caddy
      DESTINATION: ~/core/
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Sync files
        run: |
          sudo apt install sshpass -y

          # Copy the main services
          sshpass -p "${{ secrets.VPS_PASS }}" rsync -aP -e "ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no" ${{ env.SOURCE }} ${{ env.SERVER }}:${{ env.DESTINATION }}

      - name: Deploy now
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }} # the VPS/server should have awscli installed and configured (aws configure)
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASS }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            # Login to ECR
            echo $(aws ecr get-login-password --region ${{ env.ECR_REGION }}) | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            echo "Current User ID: $UID"

            cd ~/core
            # Pull the new image
            docker-compose pull frontend backend celery

            # Stop and remove the old container
            docker rm -fv core_frontend_1 core_backend_1 core_celery_1 || true

            # Up everything
            docker-compose up -d --remove-orphans

            # Rebuild the frontend (for public .env variables)

            # -> updating the .env file
            docker exec core_frontend_1 sh -c "env | grep NEXT_PUBLIC > .env"

            # -> building the frontend
            docker exec core_frontend_1 sh -c "npx next telemetry disable && npm run build"

            # -> restarting the frontend
            docker-compose restart frontend

            # Run migrations
            # Nothing yet

            # Run DB seeds
            # Nothing yet

            # Some space clean up
            docker image prune -f

            # Restart the celery beat tasks
            sleep 5 && docker exec -u root core_celery_1 python3 manage.py refresh_celery_beat_tasks

            # Inform me/us
            # nothing yet
